/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'denisse' at '11/4/16 3:58 PM' with Gradle 2.13
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.13/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://supersede.es.atos.net:10080/artifactory/libs-snapshot'
            name = 'maven-supersede-snapshot'
	    credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
	    }
        }
	maven {
            url 'http://supersede.es.atos.net:10080/artifactory/libs-release'
            name = 'maven-supersede-release'
	    credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
	    }
        }
    }
    dependencies {
         classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.7.RELEASE")
	//Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
    mavenCentral()
    add buildscript.repositories.getByName ("maven-supersede-snapshot")
    add buildscript.repositories.getByName ("maven-supersede-release")
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile('com.jayway.jsonpath:json-path')
    compile 'org.apache.axis2:axis2:1.6.1'
    compile 'org.apache.axis2:axis2-transport-http:1.6.1'
    compile 'org.apache.axis2:axis2-transport-local:1.6.1'
    //compile 'eu.supersede.if:eu.supersede.if.api:0.2.0-SNAPSHOT'
    compile(group: 'eu.supersede.if', name: 'eu.supersede.if.api', version: '0.2.0-SNAPSHOT', changing: true)
    compile(group: 'org.wso2.carbon', name: 'org.wso2.carbon.um.ws.api.stub', version: '4.2.2')
    compile(group: 'org.wso2.carbon', name: 'org.wso2.carbon.tenant.mgt.stub', version: '4.2.0')
    compile(group: 'org.wso2.carbon', name: 'org.wso2.carbon.um.ws.api', version: '4.2.2')
    compile(group: 'org.wso2.carbon', name: 'org.wso2.carbon.user.api', version: '4.2.0')
    compile(group: 'org.wso2.carbon', name: 'org.wso2.carbon.user.core', version: '4.2.0')
    compile(group: 'org.wso2.carbon', name: 'org.wso2.carbon.utils', version: '4.2.0')
    compile(group: 'opensaml.wso2', name: 'opensaml2', version: '2.4.1.wso2v1')
    compile 'ca.juliusdavies:not-yet-commons-ssl:0.3.9' //Required for EasySSLProtocolSocketFactory class
    compile("org.springframework.boot:spring-boot-starter-web")
    compile files ('./lib/feedback_library.jar')
    
    //JSON Library
	compile group: 'org.json', name: 'json', version: '20160212'
}

configurations.all {
	//Avoids conflict: SL4J Multiple bindings were found on the class path 
	exclude group: "org.slf4j", module: "slf4j-log4j12"
	// check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}

// Test execution JVM properties
tasks.withType(Test){
	systemProperty 'is.admin.user', System.getProperty ('is.admin.user', 'admin@atos.supersede.eu')
	systemProperty 'is.admin.passwd', System.getProperty ('is.admin.passwd', 'rtgWCyrc')
	systemProperty 'supersede.if.properties', System.getProperty ('supersede.if.properties', 'if.properties')
}

// Test execution filter
test {
	filter {
		includeTestsMatching "*MailProxyTest"
		includeTestsMatching "*FEDataStoreProxyTest"
		includeTestsMatching "*IFAuthenticationManagerTest"
	}
}
